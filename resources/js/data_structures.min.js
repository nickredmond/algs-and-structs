function LinkedListNode(value) {
	this.value = value;
}
LinkedListNode.prototype.setNext = function(nextNode) {
	this.next = nextNode;
};

function LinkedList() {
	this.headNode = null;
}
LinkedList.prototype.insert = function(node, index) {
	if (index >= 0) {
		var currentIndex = 0;
		var lastNode = null;
		var currentNode = this.headNode;
		while (currentIndex !== index && currentNode !== null) {
			lastNode = currentNode;
			currentNode = currentNode.next;
			currentIndex += 1;
		}

		if (currentIndex === index) {
			if (lastNode) lastNode.next = node;
			node.next = currentNode;
		}
	}
};
LinkedList.prototype.add = function(node) {
	this.insert(node, this.size());
};
LinkedList.prototype.remove = function(node, index) {

};
LinkedList.prototype.size = function() {
	var size = 0;
	var node = this.headNode;

	while (node !== null) {
		size += 1;
		node = node.nextNode;
	}

	return size;
};
LinkedList.prototype.indexOf = function(value) {
	var index = -1;
	var node = this.headNode;
	var currentIndex = 0;

	while (node !== null && index === -1) {
		if (node.value ==== value) {
			index = currentIndex;
		}
		else {
			node = node.next;
			index += 1;
		}
	}

	return index;
};
LinkedList.prototype.toArray = function() {
	var array = [];
	var node = this.headNode;

	while (node !== null) {
		array.push(node.value);
		node = node.next;
	}

	return array;
};